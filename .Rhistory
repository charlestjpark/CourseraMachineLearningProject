library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
View(adData)
modFit <- train(diagnosis ~., data = adData, method = "rf", prox = TRUE)
modFit2 <- train(diagnosis ~., data = adData, method = "gbm", verbose = "FALSE")
modFit3 <- train(diagnosis ~., data = adData, method = "lda")
pred1 <- predict(modFit, testing)
pred2 <- predict(modFit2, testing)
pred3 <- predict(modFit3, testing)
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~., method = "gam", data = predDF)
combPred <- predict(combModFit, predDF)
View(combPred)
accuracy <- sum(combPred == diagnosis)/length(diagnosis)
length(diagnosis)
accuracy <- sum(combPred == testing$diagnosis)/length(testing$diagnosis)
accuracy
combPred
testing$diagnosis
combModFit <- train(diagnosis ~., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
accuracy <- sum(combPred == testing$diagnosis)/length(testing$diagnosis)
accuracy
combModFit
accuracy
accuracy <- sum(pred1 == testing$diagnosis)/length(testing$diagnosis)
accuracy
pred1 <- predict(modFit, training)
pred2 <- predict(modFit2, training)
pred3 <- predict(modFit3, training)
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modFit <- train(diagnosis~., data = training, method = "rf", prox = TRUE)
modFit2 <- train(diagnosis~., data = training, method = "gbm", verbose = FALSE)
modFit3 <- train(diagnosis~., data = training, method = "lda")
pred1 <- predict(modFit, testing)
pred2 <- predict(modFit2, testing)
pred3 <- predict(modFit3, testing)
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
accuracy <- sum(combPred == testing$diagnosis)/length(testing$diagnosis)
accuracy
accuracy1 <- sum(pred1 == testing$diagnosis)/length(testing$diagnosis)
accuracy2 <- sum(pred2 == testing$diagnosis)/length(testing$diagnosis)
accuracy3 <- sum(pred3 == testing$diagnosis)/length(testing$diagnosis)
accuracy1
accuracy2
accuracy3
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modFit <- train(CompressiveStrength~., data = training, method = "lasso")
?plot.enet
modFit
View(modFit)
plot(modFit, xvar = c("fraction", "penalty", "L1norm", "steps"))
varImp(modFit)
print(modFit)
plot(modFit)
data(diabetes)
?attach
attach(diabetes)
object <- enet(x,y,lambda=1)
par(mfrow=c(2,2))
plot(object)
plot(object,xvar="step")
detach(diabetes)
par(mfrow = c(1,1))
plot(object)
View(diabetes)
View(inTrain)
View(training)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)
inTrain
inTrain[[1]]
modFit <- train(CompressiveStrength~., data = training, method = "lasso")
modFit
data(diabetes)
attach(diabetes)
object <- enet(x,y,lambda=1)
par(mfrow=c(2,2))
plot(object)
plot(object,xvar="step")
detach(diabetes)
modFit
par(mfrow = c(1,1))
modFit
plot.enet(fit, xvar = "penalty")
plot.enet(modfit, xvar = "penalty")
plot.enet(modFit, xvar = "penalty")
modFit$finalModel
par(mfrow = c(1,1))
modFit$modelInfo
plot.enet(modFit$finalModel, xvar = "penalty")
getwd()
setwd("C:/Users/owner/Dropbox/2016-2017/Data_Science/7 - Practical Machine Learning")
dat = read.csv("gaData.csv")
library(lubridate)
training = dat[year(dat$date)<2012,]
testing = dat[year(dat$date)>2011,]
tstrain = ts(training$visitsTumblr)
?bats
?forecast
install.packages("forecast")
library(forecast)
?bats
fitmod <- bats(tstrain)
fitmod
View(testing)
forecastmod <- forecast.bats(fitmod, level = 95, h = nrow(testing))
nrow(testing)
forecastmod
fact <- testing$visitsTumblr
length(fact)
class(forecastmod)
forecastmod <- as.dataframe(forecastmod)
forecastmod <- data.frame(forecastmod)
View(forecastmod)
sum(fact >= forecastmod$Lo.95 & fact <= forecastmod$Hi.95)/length(fact)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
View(training)
set.seed(325)
model <- svm(CompressiveStrength~., data = training)
library(e1071)
set.seed(325)
model <- svm(CompressiveStrength ~., data = training)
pred <- predict(model, testing)
pred
rmse(pred, testing$CompressiveStrength)
install.packages("hydroGOF")
library(hydroGOF)
rmse(pred, testing$CompressiveStrength)
sqrt((pred - testing$CompressiveStrength)^2 / length(pred))
sqrt(sum((pred - testing$CompressiveStrength)^2 / length(pred))
)
library(jsonlite)
library(jsonLite)
install.packages("jsonlite")
library(knitr)
?rmarkdown
install.packages("rmarkdown")
install.packages("downloader")
?download.file
rm(list = ls())
getwd()
setwd("C:/Users/owner/Dropbox/2016-2017/Data_Science/7 - Practical Machine Learning")
setwd("C:/Users/owner/Dropbox/2016-2017/Data_Science/7 - Practical Machine Learning/Week 4/CourseraMachineLearningProject")
getwd()
training = read.csv("train.csv")
testing = read.csv("test.csv")
View(training)
names(training)
str(training)
train_results <- training$classe
View(train_results)
train_results
table(train_results)
str(training)
?read.csv
?is.na
is.na(training$max_roll_belt)
train_NAs <- apply(training, 2, function(x) {sum(is.na(x))})
View(train_NAs)
train_NAs <- data.frame(train_NAs)
data_training <- read.csv("training.csv", na.strings = c("NA", "", " "))
data_training <- read.csv("train.csv", na.strings = c("NA", "", " "))
View(data_training)
?read.csv
View(training)
NA_attr <- apply(training, 2, function(x){sum(is.na(x))})
NA_attr <- data.frame(NA_attr)
NA_attr
dim(training)
NA_attr <- apply(training, 2, function(x){sum(is.na(x))})
NA_attr <- data.frame(NA_attr)
training <- training[, which(NA_attr == 0)]
View(training)
dim(training)
training <- training[, -(1:7)]
?createDataPartition
inTrain <- createDataPartition(training, p = 0.7, list = FALSE)
train_data <- training[inTrain, ]
cv_data <- training[-inTrain, ]
modFit <- train(class~., data = train_data, method = "rf", prox = TRUE)
inTrain <- createDataPartition(training$classe, p = 0.7, list = FALSE)
train_data <- training[inTrain, ]
cv_data <- training[-inTrain, ]
modFit <- train(class~., data = train_data, method = "rf", prox = TRUE)
inTrain <- createDataPartition(training$classe, p = 0.7)
train_data <- training[inTrain, ]
cv_data <- training[-inTrain, ]
modFit <- train(class~., data = train_data, method = "rf", prox = TRUE)
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = FALSE)
inTrain
inTrain <- createDataPartition(y = training$classe, p = 0.7)
inTrain
class(inTrain)
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = FALSE)
class(inTrain)
train_data <- training[inTrain, ]
View(train_data)
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = FALSE)
train_data <- training[inTrain, ]
cv_data <- training[-inTrain, ]
modFit <- train(class~., data = train_data, method = "rf", prox = TRUE)
modFit <- train(classe~., data = train_data, method = "rf", prox = TRUE)
warnings()
